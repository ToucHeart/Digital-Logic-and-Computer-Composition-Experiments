// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/10/2021 21:32:39"
                                                                                
// Verilog Test Bench template for design : exp5
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module exp5_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg [1:0] KEY;
reg [9:0] SW;
// wires                                               
wire [6:0]  HEX0;
wire [6:0]  HEX1;
wire [6:0]  HEX2;
wire [6:0]  HEX3;

// assign statements (if any)                          
exp5 i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.KEY(KEY),
	.SW(SW)
);
integer i;
initial                                                
begin                                                  
	KEY[0]=0; 
	KEY[1]=1;//写使能置0
	
	SW[7:4]=4'b0;//read
	SW[3:0]=4'b0;//write
	SW[9:8]=2'b00;//data
	
	for(i=0;i<15;i=i+1)
	begin
		#1 SW[7:4]=SW[7:4]+4'b0001;
	end
	
	#2;
	KEY[1]=0;
	SW[9:8]=2'b00;
	SW[3:0]=4'b0000;
	for(i=0;i<15;i=i+1)
	begin
		#1 SW[3:0]=SW[3:0]+4'b0001;
			SW[7:4]=SW[3:0];
			SW[9:8]=SW[9:8]+2'b01;
	end
	#2;
	KEY[1]=1;
	$stop;
end                                                    
always
begin
	#1 KEY[0]=~KEY[0];
end
                                    
endmodule
//共用时钟、读写地址和写使能信号。

